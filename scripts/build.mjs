import { typecheck } from "./typecheck.mjs";
import fastGlob from "fast-glob";
import esbuild from "esbuild";
import process from "process";
import path from "path";
import fs from "fs";

const outdir = "./out";

console.log(`Building to directory: ${outdir}\n`);

const prod = (process.argv[2] === "production");
const context = await esbuild.context({
    banner: { js: "// GENERATED BY ESBUILD" },
    logOverride: { "empty-glob": "silent" },
    entryPoints: [
        // app context entry points (0-1, ts)
        "src/**/app/main.ts",
        // style context entry points (0-1, ts)
        "src/**/style/main.ts",
        // dom context entry points (Top level, 0-n, ts/tsx)
        "src/**/dom/*.ts",
        "src/**/dom/*.tsx",
    ],
    external: [
        "@app",
        "@dom",
        "@style",
        "react",
        "react-dom",
        "react/jsx-runtime",
    ],
    plugins: [
        copyManifestPlugin(outdir),
        typecheckTSConfigPlugin(),
    ],
    format: 'cjs',
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outdir: outdir,
    outbase: 'src',
    bundle: true,
    minify: prod,
    keepNames: true
});

export function copyManifestPlugin(outdir) {
    let pattern = 'src/**/manifest.json';
    return {
        name: 'copy-manifest.json',
        setup(build) {
            build.onEnd(async () => {
                const files = await fastGlob(pattern);
                for (const file of files) {
                    const dest = path.join(outdir, path.relative('src', file));
                    fs.mkdirSync(path.dirname(dest), { recursive: true });
                    fs.copyFileSync(file, dest);
                }
            });
        },
    };
}

export function typecheckTSConfigPlugin() {
    let pattern = 'src/**/**/tsconfig.json';
    return {
        name: 'typecheck-tsconfig.json',
        setup(build) {
            build.onEnd(async () => {
                const files = await fastGlob(pattern);
                for (const file of files) {
                    typecheck(file);            
                }
            });
        },
    };
}

if (prod) {
    await context.rebuild();
    process.exit(0);
} else {
    await context.watch();
}

/*
const parentDir = path.join(process.cwd(), "../");
if (path.basename(parentDir) === 'Extensions') {
    outdir = parentDir;
}
*/