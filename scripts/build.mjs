import { typecheck } from './typecheck.mjs'
import fastGlob from 'fast-glob'
import esbuild from 'esbuild'
import process from 'process'
import path from 'path'
import os from 'os'
import fs from 'fs'

const outdir = './out'

console.log(`Building to directory: ${outdir}\n`)

const prod = process.argv[2] === 'production'
const context = await esbuild.context({
  banner: { js: '// GENERATED BY ESBUILD' },
  logOverride: { 'empty-glob': 'silent' },
  entryPoints: [
    // app context entry points (0-1, ts)
    'src/**/app/main.ts',
    // style context entry points (0-1, ts)
    'src/**/style/main.ts',
    // dom context entry points (Top level, 0-n, ts/tsx)
    'src/**/dom/*.ts',
    'src/**/dom/*.tsx',
  ],
  external: ['@app', '@dom', '@style', 'react', 'react-dom', 'react/jsx-runtime'],
  plugins: [copyManifestPlugin(outdir), typecheckTSConfigPlugin(), installExtensionPlugin()],
  format: 'cjs',
  logLevel: 'info',
  sourcemap: prod ? 'external' : 'inline',
  treeShaking: true,
  outdir: outdir,
  outbase: 'src',
  bundle: true,
  minify: prod,
  keepNames: true,
})

if (prod) {
  await context.rebuild()
  process.exit(0)
} else {
  await context.watch()
}

// Plugins

function copyManifestPlugin(outdir) {
  let pattern = 'src/**/manifest.json'
  return {
    name: 'copy-manifest.json',
    setup(build) {
      build.onEnd(async () => {
        const files = await fastGlob(pattern)
        for (const file of files) {
          const dest = path.join(outdir, path.relative('src', file))
          fs.mkdirSync(path.dirname(dest), { recursive: true })
          fs.copyFileSync(file, dest)
        }
      })
    },
  }
}

function typecheckTSConfigPlugin() {
  let pattern = 'src/**/**/tsconfig.json'
  return {
    name: 'typecheck-tsconfig.json',
    setup(build) {
      build.onEnd(async () => {
        const files = await fastGlob(pattern)
        for (const file of files) {
          typecheck(file)
        }
      })
    },
  }
}

function installExtensionPlugin() {
  return {
    name: 'install-extension',
    setup(build) {
      build.onEnd(async () => {
        const extensionsPath = path.join(
          os.homedir(),
          'Library/Containers/com.hogbaysoftware.Bike/Data/Library/Application Support/Bike/Extensions'
        )
        const files = await fastGlob('out/**/manifest.json')
        for (const manifestFile of files) {
          const manifest = JSON.parse(fs.readFileSync(manifestFile, 'utf-8'))
          if (manifest.install == true) {
            let extensionDir = path.dirname(manifestFile)
            let extensionName = path.basename(extensionDir)
            let srcPath = path.join(process.cwd(), extensionDir)
            let destPath = path.join(extensionsPath, extensionName)

            try {
              if (fs.existsSync(destPath)) {
                fs.rmSync(destPath, { recursive: true, force: true })
              }
              fs.mkdirSync(destPath, { recursive: true })
              fs.cpSync(srcPath, destPath, { recursive: true })
              console.log(`Installed extension: ${extensionName}`)
            } catch (error) {
              console.error(`Failed to install extension: ${extensionName}`)
              console.error(error)
            }
          }
        }
      })
    },
  }
}

/*
const parentDir = path.join(process.cwd(), "../");
if (path.basename(parentDir) === 'Extensions') {
    outdir = parentDir;
}
*/
